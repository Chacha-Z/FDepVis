[{"D:\\Code\\FDepVis\\src\\index.js":"1","D:\\Code\\FDepVis\\src\\Dashboard.js":"2","D:\\Code\\FDepVis\\src\\views\\AttributesHeatmap\\index.js":"3","D:\\Code\\FDepVis\\src\\views\\FamilySelector\\index.js":"4","D:\\Code\\FDepVis\\src\\views\\FamilyTree\\index.js":"5","D:\\Code\\FDepVis\\src\\views\\ScatterPlot\\index.js":"6","D:\\Code\\FDepVis\\src\\views\\RelativeCompare\\index.js":"7","D:\\Code\\FDepVis\\src\\redux\\actions.js":"8","D:\\Code\\FDepVis\\src\\redux\\index.js":"9","D:\\Code\\FDepVis\\src\\redux\\reducers.js":"10","D:\\Code\\FDepVis\\src\\redux\\state.js":"11"},{"size":193,"mtime":1572995136000,"results":"12","hashOfConfig":"13"},{"size":1870,"mtime":1608273682654,"results":"14","hashOfConfig":"13"},{"size":6428,"mtime":1608036095339,"results":"15","hashOfConfig":"13"},{"size":2794,"mtime":1608275773110,"results":"16","hashOfConfig":"13"},{"size":29113,"mtime":1608469264962,"results":"17","hashOfConfig":"13"},{"size":6789,"mtime":1608425623491,"results":"18","hashOfConfig":"13"},{"size":6461,"mtime":1608036095360,"results":"19","hashOfConfig":"13"},{"size":286,"mtime":1606051411760,"results":"20","hashOfConfig":"13"},{"size":285,"mtime":1606035451211,"results":"21","hashOfConfig":"13"},{"size":664,"mtime":1608444809794,"results":"22","hashOfConfig":"13"},{"size":420979,"mtime":1608438569428,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1jthuuv",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Code\\FDepVis\\src\\index.js",[],["53","54"],"D:\\Code\\FDepVis\\src\\Dashboard.js",["55"],"import React, { Component } from 'react';\nimport {  Row, Col  } from 'antd';\nimport ScatterPlot from './views/ScatterPlot';\nimport FamilySelector from './views/FamilySelector';\nimport FamilyTree from './views/FamilyTree';\nimport AttributesHeatmap from './views/AttributesHeatmap';\nimport RelativeCompare from './views/RelativeCompare';\nimport './dashboard.css';\n\n\nexport default class Dashboard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Row style={{ height: '95vh' }}>\n                    <Col span={6} style={{ height: '100%' }}>\n                        <Row style={{ height: '40%' }}>\n                            <ScatterPlot />\n                        </Row>\n                        <Row style={{ height: '60%' }}>\n                            <FamilySelector />\n                        </Row>\n                    </Col>\n                    <Col span={18} style={{ height: '100%' }}>\n                        <Row style={{ height: '60%' }}>\n                            <FamilyTree/>\n                        </Row>\n                        <Row style={{ height: '40%' }}>\n                            <Col span={12} style={{ height: '100%' }}><AttributesHeatmap /></Col>\n                            <Col span={12} style={{ height: '100%' }}><RelativeCompare /></Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row style={{ height: '5vh' }} id='footer' >\n                    <div style={{textAlign: \"center\"}}>\n                        Source Code <a href='https://github.com/Chacha-Z/FDepVis'>https://github.com/Chacha-Z/FDepVis</a>;\n                        Author <a href='#'>我来取个名</a>;\n                    </div>\n                </Row>\n            </div>\n        )\n    }\n}\n","D:\\Code\\FDepVis\\src\\views\\AttributesHeatmap\\index.js",["56","57","58","59","60","61"],"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport './AttributesHeatmap.css';\n\nexport default class AttributesHeatmap extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            names: [\"m0\", \"m1\", \"m2\", \"m3\", \"m4\"],  //家族人名\n            attrs: [\"alcohol\", \"psychosis\", \"anxiety-non-trauma\", \"somatic disorder\", \"eating\", \"bipolar spectrum illness\", \"depression\", \"interpersonal trauma\", \"PD-Cluster C-anxiety\", \"PD-Cluster B-emotional\", \"PD\", \"Impulse control disorder\", \"obesity\", \"cardiovascular\", \"COPD\", \"asthma\", \"immune-autoimmune\"],  //临床属性 17个\n\n            allTimes : [4, 2, 4],\n\n            values: [ // 2*3 test\n                {\n                    row: 0, //行，第几个人\n                    col: 0, //列，第几个属性\n                    times: 1 //诊断次数\n                },\n                {\n                    row: 0,\n                    col: 1,\n                    times: 2 //诊断次数\n                },\n                {\n                    row: 0,\n                    col: 2,\n                    times: 3 //诊断次数\n                },\n                {\n                    row: 1,\n                    col: 0,\n                    times: 3 //诊断次数\n                },\n                {\n                    row: 1,\n                    col: 1,\n                    times: 0 //诊断次数\n                },\n                {\n                    row: 1,\n                    col: 2,\n                    times: 1 //诊断次数\n                }\n            ]\n        }\n\n    }\n\n\n\n    componentDidMount() {\n        this.drawChart()\n    }\n\n    drawChart() {\n        const _this = this;\n        const width = document.getElementById(\"AttributesHeatmap\").clientWidth\n        const height = document.getElementById(\"AttributesHeatmap\").clientHeight - 30\n        const height1 = height - 300\n        console.log(height1)\n        const gridSize = Math.floor(width / this.state.attrs.length)\n\n        const margin = { top: 5, bottom: 10, left: 10, right: 10 }\n\n        //颜色\n        const color = d3.scaleLinear()\n            //.domain([0, d3.max(this.state.values)])\n            .domain([0, 4])\n            .range(['white', \"#2171b5\"])\n\n        const svg = d3.select(\"#AttributesHeatmap\").append('svg')\n            .attr(\"width\", width).attr(\"height\", height)\n\n        /* ----------------------------柱状图------------------------  */\n\n        const svg1 = d3.select(\"#BarChart\").append('svg')\n        .attr(\"width\", width).attr(\"height\", height1)\n        \n        const g = svg1.append(\"g\")\n        .attr(\"transform\",\"translate(12,0)\");\n\n        const xScale = d3.scaleBand()\n            .domain(d3.range(this.state.allTimes))\n            .rangeRound([0, width - margin.left - margin.right]);\n        const xAxis = d3.axisBottom(xScale);\n\n        const yScale = d3.scaleLinear()\n            .domain([0, d3.max(this.state.allTimes)])\n            .range([height1, 0]);\n        const yAxis = d3.axisLeft(yScale);\n\n        const gs = g.selectAll(\".bar\")\n    \t\t.data(this.state.allTimes)\n    \t\t.enter()\n            .append(\"g\");\n            \n        const rectPadding = 20;//矩形之间的间隙\n    \tgs.append(\"rect\")\n    \t\t.attr(\"x\",function(d,i){\n                console.log(d,i)\n    \t\t\treturn i*gridSize + rectPadding/2;\n    \t\t})\t\n    \t\t.attr(\"y\",function(d){\n                console.log(yScale(d));\n    \t\t\treturn yScale(d);\n    \t\t})\n    \t\t.attr(\"width\",function(){\n    \t\t\treturn gridSize - rectPadding/2;\n    \t\t})\n    \t\t.attr(\"height\",function(d){\n                console.log(height1-yScale(d));\n    \t\t\treturn height1-yScale(d);\n    \t\t})\n    \t\t.attr(\"fill\",d => color(d));\n\n        /* ----------------------------热力图------------------------  */\n        const nameLabels = svg.selectAll(\".nameLabel\")\n            .data(this.state.names)\n            .enter().append(\"text\")\n            .text(function (d) { return d; })\n            .attr(\"x\", 0)\n            .attr(\"y\", function (d, i) { return i * gridSize + margin.top; })\n            .attr(\"font-size\", \"9pt\")\n            .attr(\"fill\", \"#aaa\")\n            .attr(\"transform\", \"translate(0,\" + (margin.left + gridSize / 1.5) + \")\")\n\n        const attrLabels = svg.selectAll(\".attrLabels\")\n            .data(this.state.attrs)\n            .enter().append(\"text\")\n            .text(function (d) { return d.substr(0, 1); })\n            .attr(\"x\", function (d, i) { return i * gridSize; })\n            .attr(\"y\", margin.top)\n            .attr(\"font-size\", \"9pt\")\n            .attr(\"fill\", \"#aaa\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"transform\", \"translate(\" + (10 + gridSize / 2) + \", 12)\")\n\n        const tooltip = d3.select(\".heatmap-tooltip\").attr(\"transform\", \"translate(10,20)\")\n\n        const cards = svg.selectAll(\".attr\")\n            .data(this.state.values)\n        //console.log(cards)\n\n        //  .enter().append(\"rect\")\n\n        const cardsEnter = cards.enter().append(\"rect\")\n            .attr(\"x\", function (d) { return 10 + (d.col) * gridSize; })\n            .attr(\"y\", function (d) { return (d.row) * gridSize + margin.top; })\n            .attr(\"transform\", \"translate(10,20)\")\n            .attr(\"rx\", 4)\n            .attr(\"ry\", 4)\n            .attr(\"width\", gridSize)\n            .attr(\"height\", gridSize)\n            .style(\"fill\", function (d) { return color(d.times); })\n            .on(\"mousemove\", function (d, i) {\n                let coordinates = d3.mouse(this);\n                tooltip.style(\"left\", (coordinates[0] + 5) + 'px')\n                    .style(\"top\", (coordinates[1] + 5) + 'px')\n                    .style(\"display\", \"inline-block\")\n                    .html(_this.state.attrs[d.col] + \"<br>\" + d.times)\n                    .style(\"opacity\", .9);\n            })\n            .on(\"mouseout\", function (d) { tooltip.style(\"display\", \"none\").style(\"opacity\", 0); });\n\n        // console.log(heatmap)\n    }\n\n    render() {\n        const { data } = this.props;\n        return (\n\n            <div id='AttributesHeatmap' className='pane' >\n                <div className='header' >Attributes Heatmap</div>\n                <div id='BarChart'> </div>\n                <div>\n                    {/* <BarChart data={data} width={1000} height={550}/> */}\n                    <div className='heatmap-tooltip' style={{ opacity: 0 }}></div>\n                </div>\n            </div>\n\n\n        )\n    }\n}","D:\\Code\\FDepVis\\src\\views\\FamilySelector\\index.js",["62","63","64","65"],"import React, { Component } from 'react';\nimport './FamilySelector.css';\nimport { Table, Tag, Space } from 'antd';\n// 使用redux\nimport store from '../../redux/index'\nimport action from '../../redux/actions'\n\nexport default class FamilySelector extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: [],\n            columns: [\n                {\n                    title: 'ID',\n                    dataIndex: 'ID',\n                    key: 'ID'\n                },\n                {\n                    title: 'people',\n                    dataIndex: 'people',\n                    key: 'people'\n                },\n                {\n                    title: 'SNum',\n                    dataIndex: 'SNum',\n                    key: 'SNum'\n                }\n            ]\n        };\n    }\n    componentDidMount(){\n        this.setState({\n            dataSource: store.getState().familyInfo\n        });\n    }\n\n    onRowClick(e){\n        console.log(e)\n    }\n\n    getElementByAttr(tag,attr,value){\n        var aElements=document.getElementsByTagName(tag);\n        var aEle=[];\n        for(var i=0;i<aElements.length;i++)\n        {\n            if(aElements[i].getAttribute(attr)==value)\n                aEle.push( aElements[i] );\n        }\n        return aEle;\n    }\n    render() {\n        return (\n            <div id='FamilySelector' className='pane'>\n                <div className='header'>Family Selector</div>\n                <Table \n                    onRow={record => {\n                        return {\n                            onClick: event => {\n                                console.log(record)\n                                let node = this.getElementByAttr('tr', 'data-row-key', record.key)[0];\n                                if(node.getAttribute('class').indexOf('onSelect') == -1){\n                                    node.classList.add('onSelect')\n                                    store.dispatch(action.addFamily(record.ID))\n                                }else{\n                                    node.classList.remove('onSelect')\n                                    store.dispatch(action.removeFamily(record.ID))\n                                }\n                            }\n                        };\n                    }}\n                    rowClassName={record => {\n                        return  store.getState().selectedFamily.indexOf(record.key) !== -1 ? 'onSelect' : '';\n                    }}\n                    dataSource={this.state.dataSource} columns={this.state.columns} size='small'\n                    pagination={{\n                        hideOnSinglePage: true,\n                        defaultPageSize: 10\n                    }}\n                />;\n            </div>\n        )\n    }\n}","D:\\Code\\FDepVis\\src\\views\\FamilyTree\\index.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84"],"import React, { Component } from 'react';\nimport './FamilyTree.css';\nimport * as d3 from 'd3';\nimport store from '../../redux/index';\nimport axios from 'axios';\n\nexport default class FamilyTree extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      focusFamily: 0\n    }\n  }\n  componentDidMount(){\n    store.subscribe(()=>{\n        this.uploadData()\n    })\n    this.uploadData();\n  }\n      \n  uploadData() {\n    const _this = this;\n    \n    const focusFamily = store.getState().focusFamily\n    axios.get(\"http://106.52.126.175/api/getFamilyTree/\"+'?fid='+focusFamily\n    ).then((res) => {\n        let data = res.data;\n\n        this.drawHorPro(data);\n    })\n}\n  \n  // 径向树\n  draw(){\n    \n    const width = document.getElementById(\"FamilyTree\").clientWidth\n    const height = document.getElementById(\"FamilyTree\").clientHeight-45\n\n    var graphicOpt = {\n      width: width,\n      height: height,\n      radius: height/2,\n    }\n\n    let graphicOpt_radialC = {  //节点大小和颜色设置\n        width:14,\n        height:14,\n        color: d3.scaleOrdinal()\n            .range([\"aqua\", \"blue\", \"fuchsia\", \"gray\", \"green\", \"lime\", \"maroon\", \"navy\", \"olive\", \"orange\", \"purple\", \"red\", \"silver\", \"teal\", \"black\", \"yellow\"])\n            //.range([\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",\"#d9d9d9\",\"#bc80bd\",\"#ccebc5\",\"#ffed6f\",\"#eea60d\",\"#a9402a\",\"#845d54\",,\"#056f1f\",\"#475e4c\"])\n    }\n\n    d3.selection.prototype.moveToFront = function() {\n        return this.each(function(){\n            this.parentNode.appendChild(this);\n        });\n    };\n    let dataLists =[];\n    // 加载数据\n    loadTree(\"family149_3\",0);\n    loadTree(\"family176860_3\",1);\n    // makeKey();\n\n    function loadTree(familyName,isRight){\n      var data = store.getState()[familyName]\n      dataLists[+isRight] = {id: 'Tree'+(+isRight), data:data};\n      createHolder(dataLists)\n    }\n\n\n    // 添加SVG对象\n    function createHolder(listTree) { // [{id: family1, data: loaded from json}]\n      let holders = d3.select('#FamilyTree')\n          .selectAll('div.svgHolder')\n          .data(listTree, d=>d.id)\n          .call(updateHoders);\n      holders.exit().remove();\n      holders\n          .enter()\n          .append('div')\n          .attr('class','svgHolder')\n          .call(updateHoders);\n\n      function updateHoders(p){\n          return p.attr('id',d=>d.id)\n              .each(function(d){drawTree('#'+d.id, d.data, graphicOpt)});\n      }\n    }\n\n    function drawTree(holder, data, graphicOpt) {\n      // 定义画布维度和边界\n      var width = graphicOpt.width;\n      var height = graphicOpt.height;\n      var radius = graphicOpt.radius; // dendrogram的直径\n\n      let div = d3.select(holder);\n      let svg = div.select('svg g.content')\n          .attr(\"transform\", \"translate(\" +  (radius+50) + \",\" + radius + \")\");\n      if (svg.empty()) // no svg\n      {\n          svg = div\n              .append(\"svg\")\n              .attr(\"width\", radius*2+150)\n              .attr(\"height\", radius*2)\n              .append(\"g\")\n              .attr('class','content')\n              .attr(\"transform\", \"translate(\" +  (radius+50) + \",\" + radius + \")\");\n      }\n      svg.selectAll(\"*\").remove();\n\n      // 定义cluster(dendrogram)布局:\n      var cluster = d3.cluster()\n          .size([360, radius - 20]);  // 360指整个圆. radius-60指dendrogram周围有20个像素\n\n      // 为cluster布局绑定数据:\n      var root = d3.stratify()\n          .id(function (d) {\n              return d.name;\n          })\n          .parentId(function (d) {\n              return d.parent;\n          })\n          (data);\n\n      cluster(root);\n      console.log(cluster(root));\n\n      // 节点与节点之间链接生成器\n      var linksGenerator = d3.linkRadial()\n          .angle(function (d) {\n              return d.x / 180 * Math.PI;\n          })\n          .radius(function (d) {\n              return d.y;\n          });\n\n      // 在节点间添加链接:\n      svg.selectAll('path')\n          .data(root.links())\n          .enter()\n          .append('path')\n          .attr(\"d\", linksGenerator)\n          .style(\"fill\", 'none')\n          .attr(\"stroke\", '#ccc')\n\n\n      // 为每个节点添加圆.\n      var node = svg.selectAll(\".node\")\n          .data(root.descendants())\n          .enter()\n          .append(\"g\")\n          .attr(\"class\", \"node\")\n          .attr(\"transform\", function (d) {\n              return \"rotate(\" + (d.x - 90) + \")translate(\" + d.y + \")\";\n          });\n\n      //console.log(svg.selectAll(\".node\"));\n      node.selectAll('circle').data(d => {\n          let datainput=[];\n          if (d.data.group === \"individual\")\n              datainput = [{key: 'ind', data: d}];\n          else\n              datainput = [{key: 'mal', data: d}, {key: 'fem', data: d}];\n\n          return datainput.filter(person=>!d.data[person.key+'_data']);\n      }).enter()\n          .append('circle')\n          .attr(\"r\", 7)\n\n          //.style(\"fill\", \"#69b3a2\")\n          .style(\"fill\", function (d) {\n              if (d.data.data[d.key + '_suicide'] == 'Y') {\n                  return \"red\"\n              }\n              if (d.data.data[d.key + '_deceased'] == 'Y') {\n                  return \"black\"\n              } else {\n                  return \"#69b3a2\"\n              }\n\n          })\n          .attr(\"cy\", d => d.key === 'ind' ? 0 : (d.key === \"mal\" ? -8 : 8))\n          .attr(\"stroke\", \"black\")\n          .style(\"stroke-width\", .5);\n      node\n          .selectAll('g.personRadial').data(d => {\n          let datainput=[];\n          if (d.data.group === \"individual\")\n              datainput = [{key: 'ind', data: d}];\n          else\n              datainput = [{key: 'mal', data: d}, {key: 'fem', data: d}];\n\n          return datainput.filter(person=>d.data[person.key+'_data']);\n      }).enter()\n          .append('g')\n          .attr('class','personRadial')\n          .attr('transform',d=>`translate(0,${d.key === 'ind' ? 0 : (d.key === \"mal\" ? -8 : 8)})`)\n          .on('mouseover',function(){\n              d3.select(this.parentNode).moveToFront();\n              d3.select(this).select('g').attr('transform','scale(8)');\n          }).on('mouseout',function(){\n              d3.select(this).select('g').attr('transform','scale(1)');\n          })\n          .each(function(d){\n              // draw radial function\n              drawRadialChart({holder:d3.select(this),\n                  data:d.data.data[d.key+'_data'],\n                  graphicopt:graphicOpt_radialC})\n          })\n    }\n\n    function drawRadialChart({holder,data,graphicopt}) {\n      let width = graphicopt.width;\n      let height = graphicopt.height;\n      let barHeight = height / 2;\n      let color = graphicopt.color;\n      let svg = holder.append(\"g\")\n          // .attr(\"transform\", \"translate(\" + width/2 + \",\" + height/2 + \")\");\n      data = d3.entries(data);\n      var extent = d3.extent(data, function (d) {\n          return d.value;\n      });\n      var barScale = d3.scaleLinear()\n          .domain(extent)\n          .range([0, barHeight]);\n      console.log(data)\n      var keys = data.map(function (d, i) {\n          return d.key;\n      });\n      var numBars = keys.length;\n\n      var arc = d3.arc()\n          .startAngle(function (d, i) {\n              return (i * 2 * Math.PI) / numBars;\n          })\n          .endAngle(function (d, i) {\n              return ((i + 1) * 2 * Math.PI) / numBars;\n          })\n          .innerRadius(0)\n          .outerRadius(d => barScale(+d.value));\n      svg.append(\"circle\")\n          .attr(\"r\", barHeight)\n          .classed(\"outer\", true)\n          .style(\"fill\", \"white\")\n          .style(\"stroke\", \"red\")\n          .style(\"stroke-width\", 0.5);\n      var segments = svg.selectAll(\"path\")\n          .data(data)\n          .enter().append(\"path\")\n          .each(function (d) {\n              d.outerRadius = 0;\n          })\n          .style(\"fill\", function (d) {\n              return color(d.key);\n          })\n          .attr(\"d\", arc);\n\n    }\n  }\n\n  // 垂直树 \n  drawHor(){\n        const width = document.getElementById(\"FamilyTree\").clientWidth\n        const height = document.getElementById(\"FamilyTree\").clientHeight-45\n    \n        var graphicOpt = {\n          width: width,\n          height: height,\n          margin: 20,\n        }\n    \n        let graphicOpt_radialC = {  //节点大小和颜色设置\n            width:16,\n            height:16,\n            color: d3.scaleOrdinal()\n                // .range([\"aqua\", \"blue\", \"fuchsia\", \"gray\", \"green\", \"lime\", \"maroon\", \"navy\", \"olive\", \"orange\", \"purple\", \"red\", \"silver\", \"teal\", \"black\", \"yellow\"])\n                .range([\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",\"#d9d9d9\",\"#bc80bd\",\"#ccebc5\",\"#ffed6f\",\"#eea60d\",\"#a9402a\",\"#845d54\",,\"#056f1f\",\"#475e4c\"])\n        }\n    \n        d3.selection.prototype.moveToFront = function() {\n            return this.each(function(){\n                this.parentNode.appendChild(this);\n            });\n        };\n        let dataLists =[];\n        // 加载数据\n        // loadTree(\"family149_3\",0);\n        loadTree(store.getState().focusFamily,0);\n        // makeKey();\n    \n        function loadTree(familyName,isRight){\n          var data = store.getState()[familyName]\n          dataLists[+isRight] = {id: 'Tree'+(+isRight), data:data};\n          createHolder(dataLists)\n        }\n    \n        // 添加SVG对象\n        function createHolder(listTree) { // [{id: family1, data: loaded from json}]\n          let holders = d3.select('#FamilyTree')\n              .selectAll('div.svgHolder')\n              .data(listTree, d=>d.id)\n              .call(updateHoders);\n          holders.exit().remove();\n          holders\n              .enter()\n              .append('div')\n              .attr('class','svgHolder')\n              .call(updateHoders);\n    \n          function updateHoders(p){\n              return p.attr('id',d=>d.id)\n                  .each(function(d){drawTree('#'+d.id, d.data, graphicOpt)});\n          }\n        }\n    \n        function drawTree(holder, data, graphicOpt) {\n          // 定义画布维度和边界\n          var width = graphicOpt.width;\n          var height = graphicOpt.height;\n          var margin = graphicOpt.margin; // dendrogram的直径\n          var pn = Math.floor(data.length/100) == 0?1: Math.floor(data.length/100)+1;\n          console.log(data.length, data.length/100, pn)\n          let div = d3.select(holder);\n          div.select('svg').remove()\n          var svg = div\n                    .append(\"svg\")\n                    .attr(\"width\", width*pn)\n                    .attr(\"height\", height)\n                    .append(\"g\")\n                    .attr('class','content')\n                    .attr(\"transform\", \"translate(\" + margin + \",\" + margin + \")\");\n          svg.selectAll(\"*\").remove();\n          // 定义cluster(dendrogram)布局:\n          var cluster = d3.cluster()\n            //   .size([360, radius - 20]);  // 360指整个圆. radius-60指dendrogram周围有20个像素\n              .size([width*pn-margin*2, height-margin*2]);  //  [width, height]\n    \n          // 为cluster布局绑定数据:\n          var root = d3.stratify()\n              .id(function (d) {\n                  return d.name;\n              })\n              .parentId(function (d) {\n                  return d.parent;\n              })\n              (data);\n    \n          console.log(cluster(root));\n    \n          // 节点与节点之间链接生成器\n          var linksGenerator = d3.linkHorizontal()\n                                .x(function(d) { return d.x; })\n                                .y(function(d) { return d.y; });\n    \n          // 在节点间添加链接:\n          svg.selectAll('path')\n              .data(root.links())\n              .enter()\n              .append('path')\n              .attr(\"d\", linksGenerator)\n              .style(\"fill\", 'none')\n              .attr(\"stroke\", '#ccc')\n            console.log(root.links());\n    \n    \n          // 为每个节点添加圆.\n          var node = svg.selectAll(\".node\")\n              .data(root.descendants())\n              .enter()\n              .append(\"g\")\n              .attr(\"class\", \"node\")\n              .attr(\"transform\", function (d) {\n                  return \"translate(\" + d.x +\",\"+ d.y + \")\";\n              });\n            console.log(root.descendants());\n    \n          // 为每个节点画一或两个圆，需要对原数据进行修改，将原数据拆分成一或二长度的数组，再对数组中每个数据进行操作（画圆）\n          node.selectAll('circle').data(d => {\n              let datainput=[];\n              if (d.data.group === \"individual\")\n                  datainput = [{key: 'ind', data: d}];\n              else\n                  datainput = [{key: 'mal', data: d}, {key: 'fem', data: d}];\n    \n              return datainput.filter(person=>!d.data[person.key+'_data']); // 只针对未自杀或自杀却没有临床属性数据的\n            }).enter()\n            //   .append('circle')\n              .append('g')\n              .attr('transform',d=>`translate(${d.key === 'ind' ? 0 : (d.key === \"mal\" ? -12 : 12)},${d.key === 'ind' ? 0 : (d.key === \"mal\" ? -7 : 0)})`)\n              .each(function(d){\n                  let coupleholder =  d3.select(this);\n                  if(d.key === 'ind'){\n                    coupleholder.append('circle')\n                                .attr(\"r\", 7)\n                  }else if(d.key === \"mal\"){\n                    coupleholder.append('rect')\n                                .attr(\"width\", 14)\n                                .attr(\"height\", 14)\n                  }else{\n                    coupleholder.append('circle')\n                                .attr(\"r\", 7)\n                  }\n              })\n              .attr(\"r\", 7)\n    \n              .style(\"fill\", function (d) {\n                  if (d.data.data[d.key + '_suicide'] == 'Y') { //自杀的人（却没有临床属性数据），红色\n                      return \"red\"\n                  }else if (d.data.data[d.key + '_deceased'] == 'Y') {    // 死亡的人\n                      return \"black\"\n                  } else {\n                      return \"#69b3a2\"\n                  }\n    \n              })\n              .attr(\"cx\", d => d.key === 'ind' ? 0 : (d.key === \"mal\" ? -8 : 8)) // 设置偏移量\n              .attr(\"stroke\", \"black\")\n              .style(\"stroke-width\", .5);\n\n          node  // 针对自杀且有临床属性数据的，使用饼图进行绘制\n              .selectAll('g.personRadial').data(d => {\n                let datainput=[];\n                if (d.data.group === \"individual\")\n                    datainput = [{key: 'ind', data: d}];\n                else\n                    datainput = [{key: 'mal', data: d}, {key: 'fem', data: d}];\n        \n                return datainput.filter(person=>d.data[person.key+'_data']);\n              }).enter()\n                .append('g')\n                .attr('class','personRadial')\n                .attr('transform',d=>`translate(${d.key === 'ind' ? 0 : (d.key === \"mal\" ? -8 : 8)},0)`)\n                .on('mouseover',function(){\n                    d3.select(this.parentNode).moveToFront();\n                    d3.select(this).select('g').attr('transform','scale(8)');\n                }).on('mouseout',function(){\n                    d3.select(this).select('g').attr('transform','scale(1)');\n                })\n                .each(function(d){\n                    // 画饼图\n                    drawRadialChart({holder: d3.select(this),    //在该遍历数据及元素上绘制\n                                     data: d.data.data[d.key+'_data'],\n                                     graphicopt: graphicOpt_radialC})\n                })\n              }\n    \n        function drawRadialChart({holder, data, graphicopt}) {\n          let width = graphicopt.width;\n          let height = graphicopt.height;\n          let barHeight = height / 2;\n          let color = graphicopt.color;\n          let svg = holder.append(\"g\")\n              // .attr(\"transform\", \"translate(\" + width/2 + \",\" + height/2 + \")\");\n\n          data = d3.pie().value(d=>d.value)(d3.entries(data));\n    \n          var arc = d3.arc()\n              .innerRadius(0)\n              .outerRadius(barHeight);\n\n          svg.append(\"circle\")\n              .attr(\"r\", barHeight)\n              .classed(\"outer\", true)\n              .style(\"fill\", \"white\")\n              .style(\"stroke\", \"red\")\n              .style(\"stroke-width\", 0.5);\n\n          var segments = svg.selectAll(\"path\")\n              .data(data)\n              .enter().append(\"path\")\n              .style(\"fill\", function (d) {\n                  return color(d.data.key);\n              })\n              .attr(\"d\", arc);\n    \n    }\n\n    \n  }\n\n  // 改进垂直树\n  drawHorPro(data){\n\n        console.log('drawHorPro')\n        const width = document.getElementById(\"FamilyTree\").clientWidth\n        const height = document.getElementById(\"FamilyTree\").clientHeight-45\n    \n        var graphicOpt = {\n          width: width,\n          height: height,\n          margin: 20,\n        }\n    \n        let graphicOpt_radialC = {  //节点大小和颜色设置\n            width:16,\n            height:16,\n            color: d3.scaleOrdinal()\n                // .range(['#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd','#ccebc5','#ffed6f', \"silver\", \"teal\", \"black\", \"yellow\"])\n                .range([\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",\"#d9d9d9\",\"#bc80bd\",\"#ccebc5\",\"#ffed6f\",\"#eea60d\",\"#a9402a\",\"#845d54\",\"#056f1f\",\"#475e4c\"])\n        }\n    \n        d3.selection.prototype.moveToFront = function() {\n            return this.each(function(){\n                this.parentNode.appendChild(this);\n            });\n        };  \n        let dataLists =[];\n        \n        loadTree(0);\n        makeKey();\n    \n        function loadTree(isRight){\n          dataLists[+isRight] = {id: 'Tree'+(+isRight), data:data};\n          createHolder(dataLists)\n        }\n\n    \n        // 添加SVG对象\n        function createHolder(listTree) { // [{id: family1, data: loaded from json}]\n          let holders = d3.select('#FamilyTree')\n              .selectAll('div.svgHolder')\n              .data(listTree, d=>d.id)\n              .call(updateHoders);\n          holders.exit().remove();\n          holders\n              .enter()\n              .append('div')\n              .attr('class','svgHolder')\n              .call(updateHoders);\n    \n          function updateHoders(p){\n              return p.attr('id',d=>d.id)\n                  .each(function(d){drawTree('#'+d.id, d.data, graphicOpt)});\n          }\n        }\n    \n        function drawTree(holder, data, graphicOpt) {\n          // 定义画布维度和边界\n          var width = graphicOpt.width;\n          var height = graphicOpt.height;\n          var margin = graphicOpt.margin; // dendrogram的直径\n          var pn = Math.floor(data.length/100) == 0?1: Math.floor(data.length/100)+1;\n          console.log(data.length, data.length/100, pn)\n          let div = d3.select(holder);\n          div.select('svg').remove()\n          var svg = div\n                    .append(\"svg\")\n                    .attr(\"width\", width*pn)\n                    .attr(\"height\", height)\n                    .append(\"g\")\n                    .attr('class','content')\n                    .attr(\"transform\", \"translate(\" + margin + \",\" + margin + \")\");\n          svg.selectAll(\"*\").remove();\n          // 定义cluster(dendrogram)布局:\n          var cluster = d3.cluster()\n            //   .size([360, radius - 20]);  // 360指整个圆. radius-60指dendrogram周围有20个像素\n              .size([width*pn-margin*2, height-margin*3]);  //  [width, height]\n    \n          // 为cluster布局绑定数据:\n          var root = d3.stratify()\n              .id(function (d) {\n                  return d.id;\n              })\n              .parentId(function (d) {\n                  return d.parent;\n              })\n              (data);\n    \n          console.log(cluster(root));\n    \n          // 节点与节点之间链接生成器\n          var linksGenerator = d3.linkVertical()\n                                .x(function(d) { return d.x; })\n                                .y(function(d) { return d.y; });\n    \n          // 在节点间添加链接:\n          svg.selectAll('path')\n              .data(root.links())\n              .enter()\n              .append('path')\n              .attr(\"d\", linksGenerator)\n              .style(\"fill\", 'none')\n              .attr(\"stroke\", '#ccc')\n            console.log(root.links());\n    \n    \n          // 为每个节点添加圆.\n          var node = svg.selectAll(\".node\")\n              .data(root.descendants())\n              .enter()\n              .append(\"g\")\n              .attr(\"class\", \"node\")\n              .attr(\"transform\", function (d) {\n                  return \"translate(\" + d.x +\",\"+ d.y + \")\";\n              });\n            console.log(root.descendants());\n    \n          // 为每个节点画一或两个圆，需要对原数据进行修改，将原数据拆分成一或二长度的数组，再对数组中每个数据进行操作（画圆）\n          node.selectAll('circle').data(d => {\n              let datainput=[];\n              if (d.data.group === \"individual\")\n                  datainput = [{key: 'ind', data: [d.data]}];\n              else\n                  datainput = [{key: 'self', data: [d.data]}, {key: 'spouse', data: d.data.spouse}];\n              if(d.data.children){\n                datainput.push({key: 'children', data: d.data.children})\n              }\n\n              return datainput.filter(p => p.data.filter(pp => !pp.clinical_data )); // 只针对未自杀或自杀却没有临床属性数据的\n            }).enter()\n              .append('g')\n              .attr('transform',d=>{\n                let rad = d.key === 'individual'?3:8;\n                let par = d.key === 'individual'?2.8:2.2;\n                let x = 0, y = 0;\n                if(d.key === 'spouse'){\n                    x = rad*par;\n                }\n                if(d.key === 'children'){\n                    x -= d.data.length%2 == 0 ? (d.data.length/2)*rad-rad/2 : Math.floor((d.data.length/2))*rad;\n                    y = 15;\n                }\n                return `translate(${x}, ${y})`\n              })\n              .selectAll('g')\n              .data(d => d.data)\n              .enter()\n              .append('g')\n              .attr('transform',(d, i)=>{\n                let rad = d.group === 'individual'?3:8;\n                let par = d.group === 'individual'?2.8:2.2;\n                let x = i*rad*par, y = 0;\n                if(d.sex === 'M' ){\n                    x -= rad;\n                    y -= rad;\n                }\n                return `translate(${x}, ${y})`\n              })\n              .each(function(d){\n                  let coupleholder =  d3.select(this);\n                  let rad = d.group === 'individual'?3:8;\n                  if(d.sex === 'F'){ \n                    coupleholder.append('circle')\n                                .attr(\"r\", rad)\n                  }else{\n                    coupleholder.append('rect')\n                                .attr(\"width\", rad*2)\n                                .attr(\"height\", rad*2)\n                  }\n              })\n              .style(\"fill\", function (d) {\n                  if (d.is_suicide == 'Y') { //自杀的人（却没有临床属性数据），红色\n                      return \"red\"\n                  }else {\n                      return \"#ccc\"\n                  }\n    \n              })\n              .attr(\"stroke\", \"#999\")\n              .style(\"stroke-width\", .5);\n\n          node  // 针对自杀且有临床属性数据的，使用饼图进行绘制\n              .selectAll('g.personRadial').data(d => {\n                let datainput=[];\n                if (d.data.group === \"individual\")\n                    datainput = [{key: 'ind', data: d.data}];\n                else\n                    datainput = [{key: 'self', data: d.data}, {key: 'spouse', data: d.data.spouse[0]}];\n      \n                return datainput.filter(p => p.data.clinical_data );\n              }).enter()\n                .append('g')\n                .attr('class','personRadial')\n                .attr('transform',d=>{\n                  let rad = d.key === 'individual'?3:8;\n                  let par = d.group === 'individual'?2.8:2.2;\n                  let x = 0, y = 0; \n                  if(d.key === 'spouse'){\n                    x = rad*par;\n                  }\n                  return `translate(${x}, ${y})`\n                })\n                .on('mouseover',function(){\n                    // d3.select(this.parentNode).moveToFront();\n                    d3.select(this).select('g').attr('transform','scale(4)');\n                }).on('mouseout',function(){\n                    d3.select(this).select('g').attr('transform','scale(1)');\n                })\n                .each(function(d){\n                    // 画饼图\n                    drawRadialChart({holder: d3.select(this),    //在该遍历数据及元素上绘制\n                                     d: d.data,\n                                     graphicopt: graphicOpt_radialC})\n                })\n        }\n    \n        function drawRadialChart({holder, d, graphicopt}) {\n          let width = graphicopt.width;\n          let height = graphicopt.height;\n          let barHeight = height / 2;\n          let color = graphicopt.color;\n          let g = holder.append(\"g\")\n          // .attr(\"transform\", \"translate(\" + width/2 + \",\" + height/2 + \")\");\n\n        \n          var data = d3.pie().value(d=>d.value)(d3.entries(d.clinical_data));\n    \n          var arc = d3.arc()\n              .innerRadius(0)\n              .outerRadius(barHeight);\n          \n          if(d.sex === 'M' ){\n            arc.outerRadius(Math.sqrt(2)*barHeight);\n            g.append(\"circle\")\n                .attr(\"r\", Math.sqrt(2)*barHeight)\n                .classed(\"outer\", true)\n                .style(\"fill\", \"white\")\n                .style(\"stroke\", \"red\")\n                .style(\"stroke-width\", 0.5);\n            g.append('rect')\n                    .attr('x', -barHeight)\n                    .attr('y', -barHeight)\n                    .attr('width', barHeight*2)\n                    .attr('height', barHeight*2)\n                    .style(\"fill\", \"white\")\n                    .style(\"stroke\", \"red\")\n                    .style(\"stroke-width\", 0.5);\n            \n            //蒙版\n            g.append('clipPath')\n                .attr('id', 'mark-area')\n                .append('rect')\n                .attr('x', -barHeight)\n                .attr('y', -barHeight)\n                .attr('width', barHeight*2)\n                .attr('height', barHeight*2)\n            g.attr('clip-path', 'url(#mark-area)')\n          }else{\n            g.append(\"circle\")\n                .attr(\"r\", barHeight)\n                .classed(\"outer\", true)\n                .style(\"fill\", \"white\")\n                .style(\"stroke\", \"red\")\n                .style(\"stroke-width\", 0.5);\n\n          }\n            \n          var segments = g.selectAll(\"path\")\n            .data(data)\n            .enter().append(\"path\")\n            .style(\"fill\", function (d) {\n                return color(d.data.key);\n            })\n            .attr(\"d\", arc)\n    \n        }\n\n        function makeKey(){\n            var keys = [\n                \"alcohol\",\"psychosis\",\"anxiety-non-trauma\",\"somatic disorder\", \"eating\", \n                \"bipolar spectrum illness\",\"depression\",\"interpersonal trauma\",\"PD-Cluster C-anxiety\",\"PD-Cluster B-emotional\",\n                \"PD\",\"Impulse control disorder\",\"obesity\",\"cardiovascular\",\"COPD\",\"asthma\",\"immune-autoimmune\"]\n\n            var colors = [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",\"#d9d9d9\",\"#bc80bd\",\"#ccebc5\",\"#ffed6f\",\"#eea60d\",\"#a9402a\",\"#845d54\",\"#056f1f\",\"#475e4c\"]\n\n            var group = d3.select(\"#FamilyTree svg\")\n                        .append(\"g\").attr('class', 'legends')\n                        .selectAll('g')\n                        .data(keys)\n                        .enter()\n                        .append('g').attr('class', 'keysgroup')\n                        .attr('transform', (d, i)=>`translate(${5}, ${i*20})`)\n            group\n                .append('circle')\n                .attr(\"cx\", 10)\n                .attr(\"cy\", 15)\n                .attr(\"r\", 6)\n                .style(\"fill\", (d, i)=>colors[i])\n            group.append('text')\n                .attr(\"y\", '1.5em')\n                .attr(\"dx\", 23)\n                .attr(\"dy\", 3)\n                .style(\"font-size\", \"10px\")\n                .text(d=>d);\n        }\n        \n    }\n\n\n    render() {\n        return (\n            <div id='FamilyTree' className='pane' >\n                <div className='header'>Family Tree</div>\n            </div>\n        )\n    }\n}","D:\\Code\\FDepVis\\src\\views\\ScatterPlot\\index.js",["85"],"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport './ScatterPlot.css';\nimport axios from 'axios';\n\n// 使用redux\nimport store from '../../redux/index'\nimport action from '../../redux/actions'\n\nexport default class ScatterPlot extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            data: [\n                [11,27,2],\n                [98,21,2],\n                [17,40,3],\n                [43,21,3],\n                [61,1,3],\n                [2,66,1],\n                [92,52,2],\n                [41,93,1],\n                [54,59,1],\n                [12,4,1],\n                [82,90,1],\n                [90,18,1],\n                [77,54,3],\n                [60,21,1],\n                [73,47,2],\n                [64,73,1],\n                [24,30,3],\n                [42,86,2],\n                [63,35,3],\n                [27,29,1],\n                [5,87,2],\n                [89,55,2],\n                [100,24,3],\n                [76,93,3],\n                [13,1,2],\n                [99,39,3],\n                [66,96,2],\n                [41,72,1],\n                [33,28,2],\n                [1,16,2],\n                [35,19,2],\n                [48,56,1],\n                [72,2,3],\n                [96,17,1],\n                [86,19,1],\n                [20,7,1],\n                [77,39,3],\n                [15,84,2],\n                [40,51,1],\n                [25,23,2],\n                [8,51,2],\n                [31,84,3],\n                [85,1,3],\n                [100,93,2],\n                [94,85,2],\n                [100,67,1],\n                [64,93,3],\n                [44,71,1],\n                [1,80,3],\n                [50,2,3],\n                [45,87,2],\n                [60,3,1],\n                [14,60,2],\n                [22,91,3],\n                [4,59,2],\n                [100,95,2],\n                [25,38,2],\n                [71,44,2],\n                [89,10,3],\n                [38,46,2],\n                [4,38,1],\n                [78,98,3],\n                [59,92,3],\n                [91,2,1],\n                [37,27,3],\n                [45,15,2],\n                [90,90,3],\n                [77,45,2],\n                [88,20,3],\n                [19,84,2],\n                [78,46,3],\n                [68,39,3],\n                [76,32,2],\n                [69,42,1],\n                [81,71,1],\n                [65,71,1],\n                [68,96,2],\n                [3,97,1],\n                [46,56,2],\n                [47,83,2],\n                [56,87,3],\n                [8,95,1],\n                [11,42,1],\n                [13,6,3],\n                [26,81,2],\n                [1,89,2],\n                [23,64,2],\n                [71,81,1],\n                [64,28,1],\n                [87,94,2],\n                [62,20,1],\n                [53,40,1],\n                [70,18,2],\n                [78,27,2],\n                [51,96,2],\n                [83,68,1],\n                [54,10,3],\n                [24,41,3],\n                [90,4,1],\n                [56,45,1]\n            ]\n        }\n    }\n\n    componentDidMount(){\n        store.subscribe(()=>{\n            this.drawChart()\n        })\n        this.uploadData()\n    }\n    \n    uploadData() {\n        const _this = this;\n        axios.get(\"http://106.52.126.175/api/getTsneview/\"\n        ).then((res) => {\n            console.log(res);\n            let data = res.data;\n\n            _this.setState(\n                {\n                    data: data\n                }, () => {\n                    // console.log(this.state);\n                    _this.drawChart();\n                })\n        })\n        \n    }\n    drawChart() {\n        var selectedF = store.getState().selectedFamily;\n        d3.select(\"#ScatterPlot svg\").remove()\n        const points = this.state.data.filter(d=>selectedF.indexOf(d.fid) !== -1)\n        const margin = 20\n        const marginRight = 90  // 定义右边距\n        const width = document.getElementById(\"ScatterPlot\").clientWidth\n        const height = document.getElementById(\"ScatterPlot\").clientHeight - 30\n        const innerWidth = width - margin - marginRight\n        const innerHeight = height - margin*2\n\n        const svg = d3.select(\"#ScatterPlot\")\n                        .append(\"svg\")\n                        .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n                        .attr(\"viewBox\", \"0 0 \" + width +\" \"+ height)\n\n        let x = d3.scaleLinear()\n            .domain([0, Math.max(...points.map(d => d.x))])\n            .range([0, innerWidth])\n\n        let y = d3.scaleLinear()\n            .rangeRound([0, innerHeight])\n            .domain([Math.max(...points.map(d => d.y)), 0])\n\n        let z = d3.scaleOrdinal()\n                .domain([\"38\", \"149\", \"27251\", \"42623\", \"68939\", \"176860\", \"603481\", \"791533\", \"903988\"])\n                .range(['#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6'])\n\n        let fig = svg.append('g')\n            .attr('transform', 'translate(' + 10 + ',' + 10 + ')')\n\n        fig.append('g') // 输出点\n            .selectAll('circle')\n            // .attr('class', 'points')\n            .data(points)\n            .enter()\n            .append('circle')\n            .attr('cursor', 'pointer')\n            // .on('mouseover', tip.show)\n            // .on('mouseout', tip.hide)\n            .attr('fill', function(d) {\n                return z(d.fid)\n            })\n            .attr('cx', function(d) {\n                return x(d.x)\n            })\n            .attr('cy', function(d) {\n                return y(d.y)\n            })\n            .attr('r', 6)\n            .style('opacity',\"0.6\")\n       \n        let legend = fig\n            .append('g') // 画legend\n            .attr('font-family', 'Arial')\n            .attr('font-size', \"12px\")\n            .attr(\"font-weight\",\"500\")\n            .attr('transform', `translate(${innerWidth+(margin/2)+10},0)`)\n            .attr('text-anchor', 'start')\n            .selectAll('g')\n            .data(store.getState().selectedFamily)\n            .enter()\n            .append('g')\n            .attr('transform', function(d, i) {\n                return 'translate(0,' + i * 25 + ')'\n            })\n\n        legend\n            .append('rect')\n            .attr('x', 0)\n            .attr('rx', 4)\n            .attr('width', 12)\n            .attr('height', 12)\n            .attr('fill', z)\n            .style(\"opacity\",\"0.7\")\n\n        legend\n            .append('text')\n            .attr('x', 18)\n            .attr('dy', 10)\n            .text(function(d) {\n                return \"F\" + d\n            })\n\n    }\n    render() {\n\n        return (\n            <div id='ScatterPlot' className='pane'>\n                <div className='header'>Scatter Plot</div>\n            </div>\n        )\n    }\n}\n","D:\\Code\\FDepVis\\src\\views\\RelativeCompare\\index.js",["86","87","88"],"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport './RelativeCompare.css';\n\nexport default class RelativeCompare extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            nodes: [    //节点集\n                {name:\"xxx\", isDep: false},\n                {name:\"xx\", isDep: true},\n                {name:\"xx\", isDep: false},\n                {name:\"xxxx\", isDep: true},\n                {name:\"x\", isDep: true},\n                {name:\"xxxx\", isDep: false},\n                {name:\"xxx\", isDep: false},\n                {name:\"xxx\", isDep: true},\n                {name:\"xx\", isDep: false}, \n                {name:\"xxx\", isDep: false},\n                {name:\"xx\", isDep: true},\n                {name:\"xx\", isDep: false},\n                {name:\"xxxx\", isDep: true},\n                {name:\"x\", isDep: true},\n                {name:\"xxxx\", isDep: false},\n                {name:\"xxx\", isDep: false},\n                {name:\"xxx\", isDep: true},\n                {name:\"xx\", isDep: false}\n            ],\n            edges: [    //边集\n                {source:0,target:4,value:1.3},\n                {source:4,target:5,value:1},\n                {source:4,target:6,value:1},\n                {source:4,target:7,value:1},\n                {source:1,target:6,value:2},\n                {source:2,target:5,value:0.9},\n                {source:3,target:7,value:1},\n                {source:5,target:6,value:1.6},\n                {source:6,target:7,value:0.7},\n                {source:6,target:8,value:2},\n                {source:13,target:5,value:0.9},\n                {source:9,target:3,value:0.9},\n                {source:10,target:7,value:1},\n                {source:12,target:6,value:1.6},\n                {source:11,target:7,value:0.7},\n                {source:14,target:5,value:2},\n                {source:15,target:2,value:0.7},\n                {source:16,target:4,value:2},\n                {source:17,target:8,value:2}\n            ]\n        }\n    }\n    componentDidMount(){\n        this.drawChart()\n    }\n\n\n\n\n    drawChart(){\n        function ticked(){\n            links\n                .attr(\"x1\", function(d){return validateXY(d.source.x, 'x')})\n                .attr(\"y1\", function(d){return validateXY(d.source.y, 'y')})\n                .attr(\"x2\", function(d){return validateXY(d.target.x, 'x')})\n                .attr(\"y2\", function(d){return validateXY(d.target.y, 'y')});\n                \n            gs.attr(\"transform\", function(d) { return \"translate(\" + validateXY(d.x, 'x') + \",\" + validateXY(d.y, 'y') + \")\"; });\n        }\n    \n        \n        function started(d){\n            if(!d3.event.active){\n                forceSimulation.alphaTarget(0.8).restart();//设置衰减系数，对节点位置移动过程的模拟，数值越高移动越快，数值范围[0，1]\n            }\n            d.fx = d.x;\n            d.fy = d.y;\n        }\n        function dragged(d){\n            d.fx = d3.event.x;\n            d.fy = d3.event.y;\n        }\n        function ended(d){\n            if(!d3.event.active){\n                forceSimulation.alphaTarget(0);\n            }\n            d.fx = null;\n            d.fy = null;\n        }\n\n        function validateXY(val, type){\n            var r = 20;\n            if(val < r) return r;\n            if(type == 'x'){\n                if(val > width - r) return width - r;\n            }else{\n                if(val > height - r) return height - 2*r;\n            }\n            return val\n        }\n\n        const width = document.getElementById(\"RelativeCompare\").clientWidth\n        const height = document.getElementById(\"RelativeCompare\").clientHeight - 30\n        \n        var marge = {top:10, bottom:10, left:10, right:10}\n        var svg = d3.select(\"#RelativeCompare\").append('svg')\n                    .attr(\"width\", width).attr(\"height\", height)\n        var g = svg.append(\"g\")\n                    .attr(\"transform\", \"translate(\"+marge.top+\",\"+marge.left+\")\");\n\n        ////初始化力学仿真器，通过布局函数格式化数据    \n        var forceSimulation = d3.forceSimulation()\n                                .force(\"link\", d3.forceLink())\n                                .force(\"charge\", d3.forceManyBody())\n                                .force(\"center\", d3.forceCenter());\n        \n        //生成节点数据\n        forceSimulation.nodes(this.state.nodes)\n                        .on(\"tick\", ticked);//这个函数很重要，后面给出具体实现和说明\n        \n        //生成边数据\n    \tforceSimulation.force(\"link\")\n                        .links(this.state.edges)\n                        .distance((d) => {//每一边的长度\n                            return d.value*80;\n                        })\n        //设置图形的中心位置\t\n    \tforceSimulation.force(\"center\")\n                        .x(width/2)\n                        .y(height/2);\n        \n        //绘制边\n    \tvar links = g.append(\"g\")\n                    .selectAll()\n                    .data(this.state.edges)\n                    .enter()\n                    .append(\"line\")\n                    .attr(\"stroke\", '#bbb')\n                    .attr(\"stroke-width\", d => d.value);\n        //建立用来放在每个节点和对应文字的分组<g>\n        var gs = g.selectAll()\n                    .data(this.state.nodes)\n                    .enter()\n                    .append(\"g\")\n                    .attr(\"transform\", (d,i) => {\n                        var cirX = d.x;\n                        var cirY = d.y;\n                        return \"translate(\"+cirX+\",\"+cirY+\")\";\n                    })\n                    .call(d3.drag()\n                        .on(\"start\", started)\n                        .on(\"drag\", dragged)\n                        .on(\"end\", ended)\n                    )\n                \n        //绘制节点\n        gs.append(\"circle\")\n            .attr(\"r\", 20)\n            .attr(\"fill\", d=>d.isDep == true?'#295981':'#eee')\n        //文字\n        gs.append(\"text\")\n            .attr(\"x\", 0)\n            .attr(\"y\", 0)\n            .attr(\"dy\", '0.38em')\n            .attr('text-anchor', 'middle')\n            .attr('fill', d=>d.isDep == true?'#fff':'#000')\n            .text((d)=>{\n                return d.name;\n            })\n    }\n\n    render() {\n        return (\n            <div id='RelativeCompare' className='pane'>\n                <div className='header'>Relative Compare</div>\n\n            </div>\n        )\n    }\n}","D:\\Code\\FDepVis\\src\\redux\\actions.js",[],"D:\\Code\\FDepVis\\src\\redux\\index.js",[],"D:\\Code\\FDepVis\\src\\redux\\reducers.js",[],"D:\\Code\\FDepVis\\src\\redux\\state.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":44,"column":32,"nodeType":"95","endLine":44,"endColumn":44},{"ruleId":"96","severity":1,"message":"97","line":87,"column":15,"nodeType":"98","messageId":"99","endLine":87,"endColumn":20},{"ruleId":"96","severity":1,"message":"100","line":92,"column":15,"nodeType":"98","messageId":"99","endLine":92,"endColumn":20},{"ruleId":"96","severity":1,"message":"101","line":119,"column":15,"nodeType":"98","messageId":"99","endLine":119,"endColumn":25},{"ruleId":"96","severity":1,"message":"102","line":129,"column":15,"nodeType":"98","messageId":"99","endLine":129,"endColumn":25},{"ruleId":"96","severity":1,"message":"103","line":148,"column":15,"nodeType":"98","messageId":"99","endLine":148,"endColumn":25},{"ruleId":"96","severity":1,"message":"104","line":171,"column":17,"nodeType":"98","messageId":"99","endLine":171,"endColumn":21},{"ruleId":"96","severity":1,"message":"105","line":3,"column":17,"nodeType":"98","messageId":"99","endLine":3,"endColumn":20},{"ruleId":"96","severity":1,"message":"106","line":3,"column":22,"nodeType":"98","messageId":"99","endLine":3,"endColumn":27},{"ruleId":"107","severity":1,"message":"108","line":48,"column":47,"nodeType":"109","messageId":"110","endLine":48,"endColumn":49},{"ruleId":"107","severity":1,"message":"108","line":63,"column":83,"nodeType":"109","messageId":"110","endLine":63,"endColumn":85},{"ruleId":"96","severity":1,"message":"111","line":23,"column":11,"nodeType":"98","messageId":"99","endLine":23,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":26,"column":57,"nodeType":"109","messageId":"114","endLine":26,"endColumn":58},{"ruleId":"96","severity":1,"message":"115","line":93,"column":11,"nodeType":"98","messageId":"99","endLine":93,"endColumn":16},{"ruleId":"96","severity":1,"message":"116","line":94,"column":11,"nodeType":"98","messageId":"99","endLine":94,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":173,"column":51,"nodeType":"109","messageId":"110","endLine":173,"endColumn":53},{"ruleId":"107","severity":1,"message":"108","line":176,"column":52,"nodeType":"109","messageId":"110","endLine":176,"endColumn":54},{"ruleId":"96","severity":1,"message":"115","line":214,"column":11,"nodeType":"98","messageId":"99","endLine":214,"endColumn":16},{"ruleId":"96","severity":1,"message":"117","line":248,"column":11,"nodeType":"98","messageId":"99","endLine":248,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":278,"column":24,"nodeType":"120","messageId":"121","endLine":278,"endColumn":196},{"ruleId":"107","severity":1,"message":"108","line":322,"column":48,"nodeType":"109","messageId":"110","endLine":322,"endColumn":50},{"ruleId":"107","severity":1,"message":"108","line":408,"column":55,"nodeType":"109","messageId":"110","endLine":408,"endColumn":57},{"ruleId":"107","severity":1,"message":"108","line":410,"column":62,"nodeType":"109","messageId":"110","endLine":410,"endColumn":64},{"ruleId":"96","severity":1,"message":"115","line":449,"column":15,"nodeType":"98","messageId":"99","endLine":449,"endColumn":20},{"ruleId":"96","severity":1,"message":"117","line":469,"column":15,"nodeType":"98","messageId":"99","endLine":469,"endColumn":23},{"ruleId":"107","severity":1,"message":"108","line":543,"column":48,"nodeType":"109","messageId":"110","endLine":543,"endColumn":50},{"ruleId":"107","severity":1,"message":"108","line":621,"column":42,"nodeType":"109","messageId":"110","endLine":621,"endColumn":44},{"ruleId":"107","severity":1,"message":"108","line":653,"column":36,"nodeType":"109","messageId":"110","endLine":653,"endColumn":38},{"ruleId":"96","severity":1,"message":"115","line":699,"column":15,"nodeType":"98","messageId":"99","endLine":699,"endColumn":20},{"ruleId":"96","severity":1,"message":"117","line":749,"column":15,"nodeType":"98","messageId":"99","endLine":749,"endColumn":23},{"ruleId":"96","severity":1,"message":"122","line":8,"column":8,"nodeType":"98","messageId":"99","endLine":8,"endColumn":14},{"ruleId":"107","severity":1,"message":"108","line":93,"column":21,"nodeType":"109","messageId":"110","endLine":93,"endColumn":23},{"ruleId":"107","severity":1,"message":"108","line":158,"column":38,"nodeType":"109","messageId":"110","endLine":158,"endColumn":40},{"ruleId":"107","severity":1,"message":"108","line":165,"column":38,"nodeType":"109","messageId":"110","endLine":165,"endColumn":40},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'xAxis' is assigned a value but never used.","Identifier","unusedVar","'yAxis' is assigned a value but never used.","'nameLabels' is assigned a value but never used.","'attrLabels' is assigned a value but never used.","'cardsEnter' is assigned a value but never used.","'data' is assigned a value but never used.","'Tag' is defined but never used.","'Space' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'_this' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'width' is assigned a value but never used.","'height' is assigned a value but never used.","'segments' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'action' is defined but never used.","no-global-assign","no-unsafe-negation"]